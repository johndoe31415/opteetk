#!/usr/bin/env python3
#	opteetk - Tools for easier debugging of OP-TEE
#	Copyright (C) 2023-2023 Johannes Bauer
#
#	This file is part of opteetk.
#
#	opteetk is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	opteetk is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with opteetk; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import struct
from FriendlyArgumentParser import FriendlyArgumentParser
from NamedStruct import NamedStruct
from Enums import OpteeHeaderArch, OpteeHeaderImageID
from Device import Device

parser = FriendlyArgumentParser(description = "Print contents of an OP-TEE header file.")
parser.add_argument("-d", "--device", metavar = "json_file", help = "Interpret offsets according to given device.")
parser.add_argument("-f", "--force", action = "store_true", help = "Force display of contents even if it doesn't look like an OP-TEE header.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("filename", help = "bl32.bin to inspect")
args = parser.parse_args(sys.argv[1:])

if args.device is None:
	device = Device()
else:
	device = Device.load_from_file(args.device)

if args.verbose >= 2:
	device.dump()

named_struct_common = NamedStruct((
	("4s",	"magic"),
	("B",	"version"),
))

named_struct_v1 = NamedStruct((
	("4s",	"magic"),
	("B",	"version"),
	("B",	"arch"),
	("H",	"flags"),
	("L",	"init_size"),
	("L",	"init_load_addr_hi"),
	("L",	"init_load_addr_lo"),
	("L",	"init_mem_usage"),
	("L",	"paged_size"),
))

named_struct_v2 = NamedStruct((
	("4s",	"magic"),
	("B",	"version"),
	("B",	"arch"),
	("H",	"flags"),
	("L",	"nb_images"),
))

named_struct_img = NamedStruct((
	("L",	"init_load_addr_hi"),
	("L",	"init_load_addr_lo"),
	("L",	"image_id"),
	("L",	"size"),
))

with open(args.filename, "rb") as f:
	content = f.read()

common = named_struct_common.unpack_head(content)
if common.magic != b"OPTE":
	if not args.force:
		raise ValueError(f"Not an OP-TEE header file, wrong magic ({common.magic}).")
	print(f"Not an OP-TEE header file, wrong magic ({common.magic}). Forced to continue. Values may be nonsense.", file = sys.stderr)

if common.version == 1:
	fields = named_struct_v1.unpack_head(content)
	if args.verbose >= 2:
		print(fields)
	load_addr = (fields.init_load_addr_hi << 32) | fields.init_load_addr_lo
	init_end_addr = load_addr + fields.init_size
	mem_usage_end_addr = load_addr + fields.init_mem_usage
	print(f"Version       : {fields.version}")
	print(f"Architecture  : {OpteeHeaderArch(fields.arch).name}")
	print(f"Flags         : {fields.flags}")
	print(f"Load address  : {device.fmt_address(load_addr)}")
	print(f"Init size     : {fields.init_size} = {fields.init_size:#x} = {device.fmt_size(fields.init_size)}; end {device.fmt_address(init_end_addr)}")
	print(f"Init mem usage: {fields.init_mem_usage} = {fields.init_mem_usage:#x} = {device.fmt_size(fields.init_mem_usage)}; end {device.fmt_address(mem_usage_end_addr)}")
	print(f"Paged size    : {fields.paged_size} = {fields.paged_size:#x} = {device.fmt_size(fields.paged_size)}")
elif common.version == 2:
	fields = named_struct_v2.unpack_head(content)
	if args.verbose >= 2:
		print(fields)
	print(f"Version     : {fields.version}")
	print(f"Architecture: {OpteeHeaderArch(fields.arch).name}")
	print(f"Flags       : {fields.flags}")
	print(f"Images      : {fields.nb_images}")
	for imgno in range(fields.nb_images):
		img = named_struct_img.unpack_head(content, offset = named_struct_v2.size + imgno * named_struct_img.size)
		load_addr = (img.init_load_addr_hi << 32) | img.init_load_addr_lo
		print()
		print(f"Image {imgno}:")
		if args.verbose >= 2:
			print(img)
		print(f"    Load address: {device.fmt_address(load_addr)}")
		print(f"    Image ID    : {OpteeHeaderImageID(img.image_id).name}")
		print(f"    Size        : {img.size} = {img.size:#x} = {device.fmt_size(img.size)}")
else:
	raise ValueError(f"Unknown OP-TEE header version ({common.version}).")
